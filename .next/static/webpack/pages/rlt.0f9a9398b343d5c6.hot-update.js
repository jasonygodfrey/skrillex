"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("pages/rlt",{

/***/ "./utils/app2.js":
/*!***********************!*\
  !*** ./utils/app2.js ***!
  \***********************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   initializeThreeJS: function() { return /* binding */ initializeThreeJS; }\n/* harmony export */ });\n/* harmony import */ var three__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! three */ \"./node_modules/three/build/three.module.js\");\n/* harmony import */ var three_examples_jsm_postprocessing_EffectComposer_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! three/examples/jsm/postprocessing/EffectComposer.js */ \"./node_modules/three/examples/jsm/postprocessing/EffectComposer.js\");\n/* harmony import */ var three_examples_jsm_postprocessing_RenderPass_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! three/examples/jsm/postprocessing/RenderPass.js */ \"./node_modules/three/examples/jsm/postprocessing/RenderPass.js\");\n/* harmony import */ var three_examples_jsm_postprocessing_UnrealBloomPass_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! three/examples/jsm/postprocessing/UnrealBloomPass.js */ \"./node_modules/three/examples/jsm/postprocessing/UnrealBloomPass.js\");\n/* harmony import */ var simplex_noise__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! simplex-noise */ \"./node_modules/simplex-noise/dist/esm/simplex-noise.js\");\n\n\n\n\n\nfunction initializeThreeJS(mountPoint) {\n    // Initialize the noise generator\n    const noise3DFunction = (0,simplex_noise__WEBPACK_IMPORTED_MODULE_0__.createNoise3D)();\n    let mouseRadius = 0.1; // Adjust this value as needed\n    let mouseStrength = 0.05; // Adjust this value as needed, if not defined elsewhere\n    // Set up the scene, camera, and renderer\n    const scene = new three__WEBPACK_IMPORTED_MODULE_1__.Scene();\n    scene.fog = new three__WEBPACK_IMPORTED_MODULE_1__.FogExp2(0x000000, 0.2);\n    const camera = new three__WEBPACK_IMPORTED_MODULE_1__.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);\n    const renderer = new three__WEBPACK_IMPORTED_MODULE_1__.WebGLRenderer({\n        alpha: true\n    }); // enable alpha channel\n    renderer.setSize(window.innerWidth, window.innerHeight);\n    renderer.setClearColor(0x000000, 0); // the second parameter is the alpha (0 means fully transparent)\n    mountPoint.appendChild(renderer.domElement);\n    // Initialize the Effect Composer\n    const composer = new three_examples_jsm_postprocessing_EffectComposer_js__WEBPACK_IMPORTED_MODULE_2__.EffectComposer(renderer);\n    const renderPass = new three_examples_jsm_postprocessing_RenderPass_js__WEBPACK_IMPORTED_MODULE_3__.RenderPass(scene, camera);\n    composer.addPass(renderPass);\n    const bloomOptions = {\n        strength: 2.5,\n        radius: 0.6,\n        threshold: 0 // decreased threshold to make more particles bloom\n    };\n    const bloomPass = new three_examples_jsm_postprocessing_UnrealBloomPass_js__WEBPACK_IMPORTED_MODULE_4__.UnrealBloomPass(new three__WEBPACK_IMPORTED_MODULE_1__.Vector2(window.innerWidth, window.innerHeight), bloomOptions.strength, bloomOptions.radius, bloomOptions.threshold);\n    composer.addPass(bloomPass);\n    // Load the image texture\n    const textureLoader = new three__WEBPACK_IMPORTED_MODULE_1__.TextureLoader();\n    let mouse = new three__WEBPACK_IMPORTED_MODULE_1__.Vector2(10000, 10000);\n    mouseRadius = 0.2;\n    mouseStrength = 0.03;\n    let raycaster = new three__WEBPACK_IMPORTED_MODULE_1__.Raycaster();\n    const cameraParallaxFactor = 0.5;\n    window.addEventListener(\"mousemove\", (e)=>{\n        mouse.x = e.clientX / window.innerWidth * 2 - 1;\n        mouse.y = -(e.clientY / window.innerHeight) * 2 + 1;\n        mouse.z = 0.5;\n        raycaster.setFromCamera(mouse, camera);\n        if (!raycaster.ray) {\n            console.error(\"Raycaster ray is not initialized.\");\n            return; // Exit the function early to prevent further errors\n        }\n        let intersectPoint = new three__WEBPACK_IMPORTED_MODULE_1__.Vector3();\n        raycaster.ray.at(1.3, intersectPoint);\n        camera.position.x += (intersectPoint.x * cameraParallaxFactor - camera.position.x) * 0.05;\n        camera.position.y += (-intersectPoint.y * cameraParallaxFactor - camera.position.y) * 0.05;\n        camera.lookAt(scene.position);\n    });\n    window.addEventListener(\"touchstart\", handleTouch);\n    window.addEventListener(\"touchmove\", handleTouch);\n    function handleTouch(e) {\n        e.preventDefault(); // Prevents the default behavior of touch events (like scrolling)\n        // Check if there's at least one touch\n        if (e.touches.length > 0) {\n            const touch = e.touches[0];\n            mouse.x = touch.clientX / window.innerWidth * 2 - 1;\n            mouse.y = -(touch.clientY / window.innerHeight) * 2 + 1;\n            mouse.z = 0.5; // depth factor to project into the scene\n            raycaster.setFromCamera(mouse, camera);\n            mouse = raycaster.ray.at(1.3); // the z-position where the particles are\n        }\n        // Apply Parallax effect to camera based on touch movement\n        camera.position.x += (mouse.x * cameraParallaxFactor - camera.position.x) * 0.05;\n        camera.position.y += (-mouse.y * cameraParallaxFactor - camera.position.y) * 0.05;\n        camera.lookAt(scene.position);\n    }\n    const scale = 1; // Adjust this value for your desired scale. E.g., 0.5 means the image will be 50% smaller\n    textureLoader.load(\"skrillex2023logo.png\", (imageTexture)=>{\n        const imgWidth = imageTexture.image.width * scale;\n        const imgHeight = imageTexture.image.height * scale;\n        const canvas = document.createElement(\"canvas\");\n        canvas.width = imgWidth;\n        canvas.height = imgHeight;\n        const context = canvas.getContext(\"2d\");\n        context.drawImage(imageTexture.image, 0, 0, imgWidth, imgHeight);\n        const imgData = context.getImageData(0, 0, imgWidth, imgHeight).data;\n        const resolutionFactor = 2;\n        const particleTexture = textureLoader.load(\"particles2.png\");\n        const particlesGeometry = new three__WEBPACK_IMPORTED_MODULE_1__.BufferGeometry();\n        const particleVertices = [];\n        const particleColors = [];\n        const originalPositions = [];\n        const increasedBrightness = 0.65; // Place this before the loop\n        for(let y = 0; y < imgHeight; y += resolutionFactor){\n            for(let x = 0; x < imgWidth; x += resolutionFactor){\n                const index = (y * imgWidth + x) * 4;\n                const r = imgData[index];\n                const g = imgData[index + 1];\n                const b = imgData[index + 2];\n                const brightness = 0.7152 * r + 0.2126 * g + 0.0722 * b;\n                if (brightness > 128) {\n                    const xPos = (x / imgWidth - 0.5) * 2;\n                    const yPos = (y / imgHeight - 0.5) * -2;\n                    particleVertices.push(xPos, yPos, 0);\n                    originalPositions.push(xPos, yPos, 0);\n                    particleColors.push(r / 255 * increasedBrightness * 0.8, g / 255 * increasedBrightness, b / 255 * increasedBrightness);\n                }\n                particleColors.push(1, 0, 0); // Set RGB values to (1, 0, 0) for red\n                particleColors.push(0xfc / 255, 0x45 / 255, 0x26 / 255); // Set RGB values to #fc4526\n            }\n        }\n        particlesGeometry.setAttribute(\"position\", new three__WEBPACK_IMPORTED_MODULE_1__.Float32BufferAttribute(particleVertices, 3));\n        particlesGeometry.setAttribute(\"color\", new three__WEBPACK_IMPORTED_MODULE_1__.Float32BufferAttribute(particleColors, 3));\n        const particlesMaterial = new three__WEBPACK_IMPORTED_MODULE_1__.PointsMaterial({\n            size: 0.05,\n            map: particleTexture,\n            vertexColors: true,\n            transparent: true,\n            opacity: 2.8\n        });\n        const particles = new three__WEBPACK_IMPORTED_MODULE_1__.Points(particlesGeometry, particlesMaterial);\n        scene.add(particles);\n        const radius = 5; // Replace with the desired radius of the circle\n        const segments = 32; // Replace with the desired number of segments to approximate the circle\n        const circleTexture = textureLoader.load(\"backgroundalbum.png\");\n        const circleMaterial = new three__WEBPACK_IMPORTED_MODULE_1__.MeshBasicMaterial({\n            map: circleTexture\n        });\n        const circleGeometry = new three__WEBPACK_IMPORTED_MODULE_1__.CircleGeometry(radius, segments);\n        const circleMesh = new three__WEBPACK_IMPORTED_MODULE_1__.Mesh(circleGeometry, circleMaterial);\n        circleMesh.position.set(0, 0, -2);\n        circleMesh.rotation.set(0, 0, 0);\n        //scene.add(circleMesh);\n        textureLoader.load(\"circle20.png\", (imageTexture)=>{\n            const scale = 4;\n            const imgWidth = imageTexture.image.width * scale;\n            const imgHeight = imageTexture.image.height * scale;\n            const canvas = document.createElement(\"canvas\");\n            canvas.width = imgWidth;\n            canvas.height = imgHeight;\n            const context = canvas.getContext(\"2d\");\n            context.drawImage(imageTexture.image, 0, 0, imgWidth, imgHeight);\n            const imgData = context.getImageData(0, 0, imgWidth, imgHeight).data;\n            const resolutionFactor = 1; // Increase this value for a more pixelated effect\n            const particleTexture = textureLoader.load(\"particleswhite.png\");\n            const particlesGeometry = new three__WEBPACK_IMPORTED_MODULE_1__.BufferGeometry();\n            const particleVertices = [];\n            const particleColors = [];\n            const originalPositions = [];\n            const increasedBrightness = 0.4; // Place this before the loop\n            for(let y = 0; y < imgHeight; y += resolutionFactor){\n                for(let x = 0; x < imgWidth; x += resolutionFactor){\n                    const index = (y * imgWidth + x) * 4;\n                    const r = imgData[index];\n                    const g = imgData[index + 1];\n                    const b = imgData[index + 2];\n                    const brightness = 0.7152 * r + 0.2126 * g + 0.0722 * b;\n                    if (brightness > 128) {\n                        const xPos = (x / imgWidth - 0.5) * 2 * scale; // multiply by scale\n                        const yPos = (y / imgHeight - 0.5) * -2 * scale; // multiply by scale\n                        const zPos = -1; // Adjust this value to set the particles further back\n                        particleVertices.push(xPos, yPos, zPos);\n                        originalPositions.push(xPos, yPos, zPos);\n                        particleColors.push(1, 1, 1); // Set RGB values to white\n                    }\n                }\n            }\n            particlesGeometry.setAttribute(\"position\", new three__WEBPACK_IMPORTED_MODULE_1__.Float32BufferAttribute(particleVertices, 3));\n            particlesGeometry.setAttribute(\"color\", new three__WEBPACK_IMPORTED_MODULE_1__.Float32BufferAttribute(particleColors, 3));\n            const particlesMaterial = new three__WEBPACK_IMPORTED_MODULE_1__.PointsMaterial({\n                size: 0.02,\n                map: particleTexture,\n                vertexColors: true,\n                transparent: true,\n                opacity: 0.01,\n                color: new three__WEBPACK_IMPORTED_MODULE_1__.Color(1, 1, 1) // White\n            });\n            const particles = new three__WEBPACK_IMPORTED_MODULE_1__.Points(particlesGeometry, particlesMaterial);\n            scene.add(particles);\n        });\n        // 1. Load the fire texture\n        const fireTexture = new three__WEBPACK_IMPORTED_MODULE_1__.TextureLoader().load(\"circle4.png\");\n        // 2. Create the particle system material\n        const fireMaterial = new three__WEBPACK_IMPORTED_MODULE_1__.PointsMaterial({\n            map: fireTexture,\n            blending: three__WEBPACK_IMPORTED_MODULE_1__.AdditiveBlending,\n            size: 0.1,\n            transparent: true,\n            opacity: 0.05,\n            vertexColors: true,\n            depthWrite: false // To ensure particles blend properly without depth interference\n        });\n        // 3. Create the particle system geometry\n        const fireGeometry = new three__WEBPACK_IMPORTED_MODULE_1__.BufferGeometry();\n        const fireVertices = [];\n        const fireColors = [];\n        const fireSizes = [];\n        for(let i = 0; i < 5000; i++){\n            const x = (Math.random() - 0.5) * 2;\n            const y = Math.random() - 2;\n            const z = (Math.random() - 0.5) * 2;\n            fireVertices.push(x, y, z);\n            //const hue = 240 + Math.random() * 10; // This will give you a range of blue colors\n            const saturation = 80 + Math.random() * 20;\n            const lightness = 40 + Math.random() * 2;\n            const color = new three__WEBPACK_IMPORTED_MODULE_1__.Color(\"hsl(\".concat(hue, \", \").concat(saturation, \"%, \").concat(lightness, \"%)\"));\n            fireColors.push(color.r, color.g, color.b);\n        }\n        fireGeometry.setAttribute(\"position\", new three__WEBPACK_IMPORTED_MODULE_1__.Float32BufferAttribute(fireVertices, 3));\n        fireGeometry.setAttribute(\"color\", new three__WEBPACK_IMPORTED_MODULE_1__.Float32BufferAttribute(fireColors, 3));\n        fireGeometry.setAttribute(\"size\", new three__WEBPACK_IMPORTED_MODULE_1__.Float32BufferAttribute(fireSizes, 1)); // NEW: Set varying sizes\n        const fireParticles = new three__WEBPACK_IMPORTED_MODULE_1__.Points(fireGeometry, fireMaterial);\n        scene.add(fireParticles);\n        // 4. Animate the fire particles in your animate function\n        function animateFire() {\n            const positions = fireGeometry.attributes.position.array;\n            for(let i = 0; i < positions.length; i += 3){\n                positions[i + 1] += 0.005 + Math.random() * 0.01; // Add randomness to upward movement\n                if (positions[i + 1] > 0.5) {\n                    positions[i + 1] = -0.5;\n                }\n                positions[i] += (Math.random() - 0.5) * 0.01; // Add slight randomness to x position for flicker\n            }\n            fireGeometry.attributes.position.needsUpdate = true;\n        }\n        // 1. Load the fire2 texture\n        const fire2Texture = new three__WEBPACK_IMPORTED_MODULE_1__.TextureLoader().load(\"particlesred.png\"); // Change the path to the new texture\n        // 2. Create the particle system material for fire2\n        const fire2Material = new three__WEBPACK_IMPORTED_MODULE_1__.PointsMaterial({\n            map: fire2Texture,\n            blending: three__WEBPACK_IMPORTED_MODULE_1__.AdditiveBlending,\n            size: 0.08,\n            transparent: true,\n            opacity: 0.006,\n            vertexColors: true,\n            depthWrite: false\n        });\n        // 3. Create the particle system geometry for fire2\n        const fire2Geometry = new three__WEBPACK_IMPORTED_MODULE_1__.BufferGeometry();\n        const fire2Vertices = [];\n        const fire2Colors = [];\n        const fire2Sizes = [];\n        for(let i = 0; i < 4000; i++){\n            const x = (Math.random() - 0.5) * 2.5; // Wider spread\n            const y = Math.random() - 1.5;\n            const z = (Math.random() - 0.5) * 2.5; // Wider spread\n            fire2Vertices.push(x, y, z);\n            const hue1 = 5 + Math.random() * 15; // Different color variation\n            const saturation = 85 + Math.random() * 15;\n            const lightness = 35 + Math.random() * 3;\n            const color = new three__WEBPACK_IMPORTED_MODULE_1__.Color(\"hsl(\".concat(hue1, \", \").concat(saturation, \"%, \").concat(lightness, \"%)\"));\n            fire2Colors.push(color.r, color.g, color.b);\n        }\n        fire2Geometry.setAttribute(\"position\", new three__WEBPACK_IMPORTED_MODULE_1__.Float32BufferAttribute(fire2Vertices, 3));\n        fire2Geometry.setAttribute(\"color\", new three__WEBPACK_IMPORTED_MODULE_1__.Float32BufferAttribute(fire2Colors, 3));\n        fire2Geometry.setAttribute(\"size\", new three__WEBPACK_IMPORTED_MODULE_1__.Float32BufferAttribute(fire2Sizes, 1));\n        const fire2Particles = new three__WEBPACK_IMPORTED_MODULE_1__.Points(fire2Geometry, fire2Material);\n        scene.add(fire2Particles);\n        // 4. Animate the fire2 particles in your animate function\n        function animateFire2() {\n            const positions = fire2Geometry.attributes.position.array;\n            for(let i = 0; i < positions.length; i += 3){\n                positions[i + 1] += 0.004 + Math.random() * 0.009; // Different movement speed\n                if (positions[i + 1] > 0.6) {\n                    positions[i + 1] = -0.6;\n                }\n                positions[i] += (Math.random() - 0.5) * 0.012; // Different flicker\n            }\n            fire2Geometry.attributes.position.needsUpdate = true;\n        }\n        // Create a red square plane geometry\n        const squareSize = 4.5; // Adjust the size as needed\n        const squareGeometry = new three__WEBPACK_IMPORTED_MODULE_1__.PlaneGeometry(squareSize, squareSize);\n        const squareMaterial = new three__WEBPACK_IMPORTED_MODULE_1__.MeshBasicMaterial({\n            color: 0xff0000\n        }); // Red color\n        const squareMesh = new three__WEBPACK_IMPORTED_MODULE_1__.Mesh(squareGeometry, squareMaterial);\n        squareMesh.rotation.x = -Math.PI / 2; // Rotate the square 90 degrees to lay it flat\n        squareMesh.position.set(0, -2.7, 0); // Adjust the y-value to set the height of the ground\n        scene.add(squareMesh);\n        // Then, in your animate function:\n        function animate() {\n            animateFire();\n            animateFire2();\n            const positions = particlesGeometry.attributes.position.array;\n            const time = Date.now() * 0.0001; // adjust the multiplier to control the speed of the animation\n            for(let i = 0; i < positions.length; i += 3){\n                let particlePos = new three__WEBPACK_IMPORTED_MODULE_1__.Vector3(positions[i], positions[i + 1], positions[i + 2]);\n                let originalPos = new three__WEBPACK_IMPORTED_MODULE_1__.Vector3(originalPositions[i], originalPositions[i + 1], originalPositions[i + 2]);\n                // Calculate the distance between the particle and the mouse\n                let distanceToMouse = particlePos.distanceTo(mouse);\n                // If the distance is less than the mouseRadius, move the particle towards the mouse\n                if (distanceToMouse < mouseRadius) {\n                    particlePos.lerp(mouse, mouseStrength);\n                } else {\n                    // Otherwise, move the particle back to its original position\n                    particlePos.lerp(originalPos, 0.05);\n                }\n                // Use the noise function to get a smooth, varying value for each particle\n                const noiseValue = noise3DFunction(particlePos.x, particlePos.y, time);\n                // Use the noise value to adjust the position of the particle\n                particlePos.z += noiseValue * 0.01; // adjust the multiplier to control the amplitude of the animation\n                positions[i] = particlePos.x;\n                positions[i + 1] = particlePos.y;\n                positions[i + 2] = particlePos.z;\n            }\n            particlesGeometry.attributes.position.needsUpdate = true;\n            //renderer.render(scene, camera);\n            composer.render();\n            requestAnimationFrame(animate);\n        }\n        animate();\n    });\n    camera.position.z = 1.38;\n    window.addEventListener(\"resize\", ()=>{\n        const newWidth = window.innerWidth;\n        const newHeight = window.innerHeight;\n        camera.aspect = newWidth / newHeight;\n        camera.updateProjectionMatrix();\n        renderer.setSize(newWidth, newHeight);\n        composer.setSize(newWidth, newHeight);\n    });\n}\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./utils/app2.js\n"));

/***/ })

});